/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
  Hono
} from 'hono'
import type {
  Context,
  Env
} from 'hono'
import {
  z as zod
} from 'zod'
import type {
  CreatePetsBodyItem,
  ListPetsParams,
  Pet
} from './petstore.schemas'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

import { listPetsHandlers } from './handlers/listPets';
import { createPetsHandlers } from './handlers/createPets';
import { updatePetsHandlers } from './handlers/updatePets';
import { showPetByIdHandlers } from './handlers/showPetById';


const app = new Hono()

/**
 * @summary List all pets
 */
export const listPetsQueryParams = zod.object({
  "limit": zod.string().optional()
})

export const listPetsResponseItem = zod.object({
  "@id": zod.string().optional(),
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "tag": zod.string().optional(),
  "email": zod.string().email().optional(),
  "callingCode": zod.enum(['+33', '+420', '+33']).optional(),
  "country": zod.enum(['People\'s Republic of China', 'Uruguay']).optional()
})
export const listPetsResponse = zod.array(listPetsResponseItem)

export type ListPetsContext<E extends Env = any> = Context<E, '/pets', { in: { query: ListPetsParams, }}>;
app.get('/pets',...listPetsHandlers)


/**
 * @summary Create a pet
 */
export const createPetsBodyItem = zod.object({
  "name": zod.string().optional(),
  "tag": zod.string().optional()
})
export const createPetsBody = zod.array(createPetsBodyItem)

export const createPetsResponse = zod.object({
  "@id": zod.string().optional(),
  "id": zod.number(),
  "name": zod.string(),
  "tag": zod.string().optional(),
  "email": zod.string().email().optional(),
  "callingCode": zod.enum(['+33', '+420', '+33']).optional(),
  "country": zod.enum(['People\'s Republic of China', 'Uruguay']).optional()
})

export type CreatePetsContext<E extends Env = any> = Context<E, '/pets', { in: { json: CreatePetsBodyItem[], }}>;
app.post('/pets',...createPetsHandlers)


/**
 * @summary Update a pet
 */
export const updatePetsBody = zod.object({
  "@id": zod.string().optional(),
  "id": zod.number(),
  "name": zod.string(),
  "tag": zod.string().optional(),
  "email": zod.string().email().optional(),
  "callingCode": zod.enum(['+33', '+420', '+33']).optional(),
  "country": zod.enum(['People\'s Republic of China', 'Uruguay']).optional()
})

export const updatePetsResponse = zod.object({
  "@id": zod.string().optional(),
  "id": zod.number(),
  "name": zod.string(),
  "tag": zod.string().optional(),
  "email": zod.string().email().optional(),
  "callingCode": zod.enum(['+33', '+420', '+33']).optional(),
  "country": zod.enum(['People\'s Republic of China', 'Uruguay']).optional()
})

export type UpdatePetsContext<E extends Env = any> = Context<E, '/pets', { in: { json: NonReadonly<Pet>, }}>;
app.put('/pets',...updatePetsHandlers)


/**
 * @summary Info for a specific pet
 */
export const showPetByIdParams = zod.object({
  "petId": zod.string(),
  "testId": zod.string()
})

export const showPetByIdResponse = zod.object({
  "@id": zod.string().optional(),
  "id": zod.number(),
  "name": zod.string(),
  "tag": zod.string().optional(),
  "email": zod.string().email().optional(),
  "callingCode": zod.enum(['+33', '+420', '+33']).optional(),
  "country": zod.enum(['People\'s Republic of China', 'Uruguay']).optional()
})

export type ShowPetByIdContext<E extends Env = any> = Context<E, '/pets/:petId', { in: { param: {
 petId: string,
 }, }}>;
app.get('/pets/:petId',...showPetByIdHandlers)


export default app