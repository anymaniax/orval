/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import type { CreatePetsBodyItem, ListPetsParams, Pet, Pets } from '../models';

type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> =
  IsAny<T> extends true ? false : unknown extends T ? true : false;
type Primitive = string | number | boolean | bigint | symbol | undefined | null;
type isBuiltin = Primitive | Function | Date | Error | RegExp;
type NonReadonly<T> =
  T extends Exclude<isBuiltin, Error>
    ? T
    : T extends Map<infer Key, infer Value>
      ? Map<NonReadonly<Key>, NonReadonly<Value>>
      : T extends ReadonlyMap<infer Key, infer Value>
        ? Map<NonReadonly<Key>, NonReadonly<Value>>
        : T extends WeakMap<infer Key, infer Value>
          ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
          : T extends Set<infer Values>
            ? Set<NonReadonly<Values>>
            : T extends ReadonlySet<infer Values>
              ? Set<NonReadonly<Values>>
              : T extends WeakSet<infer Values>
                ? WeakSet<NonReadonly<Values>>
                : T extends Promise<infer Value>
                  ? Promise<NonReadonly<Value>>
                  : T extends {}
                    ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
                    : IsUnknown<T> extends true
                      ? unknown
                      : T;

/**
 * @summary List all pets
 */
export const listPets = async (
  params?: ListPetsParams,
  options?: RequestInit,
): Promise<Pets> => {
  const res = await fetch(`http://localhost:3000/pets`, {
    ...options,
    method: 'GET',
    body: JSON.stringify(params),
  });

  return res.json();
};
/**
 * @summary Create a pet
 */
export const createPets = async (
  createPetsBodyItem: CreatePetsBodyItem[],
  options?: RequestInit,
): Promise<Pet> => {
  const res = await fetch(`http://localhost:3000/pets`, {
    ...options,
    method: 'POST',
    body: JSON.stringify(createPetsBodyItem),
  });

  return res.json();
};
/**
 * @summary Update a pet
 */
export const updatePets = async (
  pet: NonReadonly<Pet>,
  options?: RequestInit,
): Promise<Pet> => {
  const res = await fetch(`http://localhost:3000/pets`, {
    ...options,
    method: 'PUT',
    body: JSON.stringify(pet),
  });

  return res.json();
};
/**
 * @summary Info for a specific pet
 */
export const showPetById = async (
  petId: string,
  options?: RequestInit,
): Promise<Pet> => {
  const res = await fetch(`http://localhost:3000/pets/${petId}`, {
    ...options,
    method: 'GET',
  });

  return res.json();
};
