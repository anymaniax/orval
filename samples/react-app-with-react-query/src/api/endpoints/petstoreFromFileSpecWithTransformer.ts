/**
 * Generated by orval v6.2.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
  MutationFunction,
  QueryFunction,
  useInfiniteQuery,
  UseInfiniteQueryOptions,
  useMutation,
  UseMutationOptions,
  useQuery,
  UseQueryOptions,
} from 'react-query';
import type {
  CreatePetsBody,
  Error,
  ListPetsParams,
  Pet,
  Pets,
} from '../model';
import { useCustomInstance } from '../mutator/custom-instance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary List all pets
 */
export const useListPetsHook = () => {
  const listPets = useCustomInstance<Pets>();

  return (params?: ListPetsParams, version = 1) =>
    listPets({ url: `/v${version}/pets`, method: 'get', params });
};

export const getListPetsQueryKey = (params?: ListPetsParams, version = 1) => [
  `/v${version}/pets`,
  ...(params ? [params] : []),
];


export const useListPets = <
  TData = AsyncReturnType<ReturnType<typeof useListPetsHook>>,
  TError = Error,
>(
  params?: ListPetsParams,
  version = 1,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useListPetsHook>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getListPetsQueryKey(params, version);

  const listPets = useListPetsHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useListPetsHook>>
  > = () => listPets(params, version);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useListPetsHook>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!version, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Create a pet
 */
export const useCreatePetsHook = () => {
  const createPets = useCustomInstance<Pet>();

  return (createPetsBody: CreatePetsBody, version = 1) =>
    createPets({
      url: `/v${version}/pets`,
      method: 'post',
      data: createPetsBody,
    });
};

export const useCreatePets = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useCreatePetsHook>>,
    TError,
    { data: CreatePetsBody; version?: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const createPets = useCreatePetsHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useCreatePetsHook>>,
    { data: CreatePetsBody; version?: number }
  > = (props) => {
    const { data, version } = props || {};

    return createPets(data, version);
  };

  return useMutation<
    AsyncReturnType<typeof createPets>,
    TError,
    { data: CreatePetsBody; version?: number },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Info for a specific pet
 */
export const useShowPetByIdHook = () => {
  const showPetById = useCustomInstance<Pet>();

  return (petId: string, version = 1) =>
    showPetById({ url: `/v${version}/pets/${petId}`, method: 'get' });
};

export const getShowPetByIdQueryKey = (petId: string, version = 1) => [
  `/v${version}/pets/${petId}`,
];

export const useShowPetByIdInfinite = <
  TData = AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
  TError = Error,
>(
  petId: string,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<
      AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId, version);

  const showPetById = useShowPetByIdHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>
  > = () => showPetById(petId, version);

  const query = useInfiniteQuery<
    AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(version && petId), ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const useShowPetById = <
  TData = AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
  TError = Error,
>(
  petId: string,
  version = 1,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId, version);

  const showPetById = useShowPetByIdHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>
  > = () => showPetById(petId, version);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useShowPetByIdHook>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(version && petId), ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
