/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type {
  Accepted,
  BadRequest,
  Error,
  InternalServerError,
  Okay,
  Success,
} from '../model';

export const getListPetsResponseMock = (
  overrideResponse: any = {},
): Okay | Accepted | Success =>
  faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() =>
      faker.helpers.arrayElement([
        {
          breed: faker.helpers.arrayElement(['Labradoodle'] as const),
          cuteness: faker.number.int({ min: undefined, max: undefined }),
          ...overrideResponse,
          barksPerMinute: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement(['dog'] as const),
          ...overrideResponse,
        },
        {
          breed: faker.helpers.arrayElement(['Dachshund'] as const),
          length: faker.number.int({ min: undefined, max: undefined }),
          ...overrideResponse,
          barksPerMinute: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement(['dog'] as const),
          ...overrideResponse,
          '@id': faker.helpers.arrayElement([faker.word.sample(), undefined]),
          callingCode: faker.helpers.arrayElement([
            faker.helpers.arrayElement(['+33', '+420', '+33'] as const),
            undefined,
          ]),
          country: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "People's Republic of China",
              'Uruguay',
            ] as const),
            undefined,
          ]),
          email: faker.helpers.arrayElement([
            faker.internet.email(),
            undefined,
          ]),
          id: (() => faker.number.int({ min: 1, max: 99999 }))(),
          name: (() => faker.person.lastName())(),
          tag: (() => faker.person.lastName())(),
          ...overrideResponse,
        },
        {
          petsRequested: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement(['cat'] as const),
          ...overrideResponse,
          '@id': faker.helpers.arrayElement([faker.word.sample(), undefined]),
          callingCode: faker.helpers.arrayElement([
            faker.helpers.arrayElement(['+33', '+420', '+33'] as const),
            undefined,
          ]),
          country: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "People's Republic of China",
              'Uruguay',
            ] as const),
            undefined,
          ]),
          email: faker.helpers.arrayElement([
            faker.internet.email(),
            undefined,
          ]),
          id: (() => faker.number.int({ min: 1, max: 99999 }))(),
          name: (() => faker.person.lastName())(),
          tag: (() => faker.person.lastName())(),
          ...overrideResponse,
        },
      ]),
    ),
    {
      code: faker.number.int({ min: undefined, max: undefined }),
      message: faker.word.sample(),
      ...overrideResponse,
    },
    {
      code: faker.number.int({ min: undefined, max: undefined }),
      message: faker.word.sample(),
      ...overrideResponse,
    },
  ]);

export const getListPetsResponseMock200 = (overrideResponse: any = {}): Okay =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() =>
    faker.helpers.arrayElement([
      {
        breed: faker.helpers.arrayElement(['Labradoodle'] as const),
        cuteness: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
        barksPerMinute: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['dog'] as const),
        ...overrideResponse,
      },
      {
        breed: faker.helpers.arrayElement(['Dachshund'] as const),
        length: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
        barksPerMinute: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['dog'] as const),
        ...overrideResponse,
        '@id': faker.helpers.arrayElement([faker.word.sample(), undefined]),
        callingCode: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['+33', '+420', '+33'] as const),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            "People's Republic of China",
            'Uruguay',
          ] as const),
          undefined,
        ]),
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        id: (() => faker.number.int({ min: 1, max: 99999 }))(),
        name: (() => faker.person.lastName())(),
        tag: (() => faker.person.lastName())(),
        ...overrideResponse,
      },
      {
        petsRequested: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['cat'] as const),
        ...overrideResponse,
        '@id': faker.helpers.arrayElement([faker.word.sample(), undefined]),
        callingCode: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['+33', '+420', '+33'] as const),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            "People's Republic of China",
            'Uruguay',
          ] as const),
          undefined,
        ]),
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        id: (() => faker.number.int({ min: 1, max: 99999 }))(),
        name: (() => faker.person.lastName())(),
        tag: (() => faker.person.lastName())(),
        ...overrideResponse,
      },
    ]),
  );

export const getListPetsResponseMock202 = (
  overrideResponse: any = {},
): Accepted => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.word.sample(),
  ...overrideResponse,
});

export const getListPetsResponseMock2xx = (
  overrideResponse: any = {},
): Success => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.word.sample(),
  ...overrideResponse,
});

export const getListPetsResponseMock400 = (
  overrideResponse: any = {},
): BadRequest => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.word.sample(),
  ...overrideResponse,
});

export const getListPetsResponseMock500 = (
  overrideResponse: any = {},
): InternalServerError => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.word.sample(),
  ...overrideResponse,
});

export const getListPetsResponseMockDefault = (
  overrideResponse: any = {},
): Error => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.word.sample(),
  ...overrideResponse,
});

export const getListPetsMockHandler = (
  overrideResponse?: Okay | Accepted | Success,
) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandler200 = (overrideResponse?: Okay) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandler202 = (overrideResponse?: Accepted) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock202(),
      ),
      {
        status: 202,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandler2xx = (overrideResponse?: Success) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock2xx(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandler400 = (overrideResponse?: BadRequest) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandler500 = (
  overrideResponse?: InternalServerError,
) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMock500(),
      ),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getListPetsMockHandlerDefault = (overrideResponse?: Error) => {
  return http.get('*/v:version/pets', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListPetsResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};
export const getSwaggerPetstoreMock = () => [getListPetsMockHandler()];
